// Generated by CoffeeScript 1.6.3
var EventEmitter, NecParser, util,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

util = require('util');

EventEmitter = require('events').EventEmitter;

const SCALER = 21.333;

NecParser = (function(_super) {
  __extends(NecParser, _super);

  function NecParser(type) {
    this.type = type != null ? type : 'nec';
    this.generate = __bind(this.generate, this);
    this.parse = __bind(this.parse, this);
  }

  NecParser.prototype.parse = function(buffer) {
    var address, codeBin, hi, i, ircode, ircodeInv, j, lo, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4;
    codeBin = '';
    if (buffer.length < 134) {
      return false;
    }
    for (i = _i = 0, _ref = buffer.length - 4; _i <= _ref; i = _i += 2) {
      hi = this._getPulseLength(buffer, i);
      lo = this._getPulseLength(buffer, i + 2);
      if ((4200 < hi && hi < 9000) && (4200 < lo && lo < 4600) && i + 4 < buffer.length - 4) {
        codeBin = '';
        for (j = _j = _ref1 = i + 4, _ref2 = buffer.length - 4; _j < _ref2; j = _j += 4) {
          hi = this._getPulseLength(buffer, j);
          lo = this._getPulseLength(buffer, j + 2);
          if ((2000 < (_ref3 = hi + lo) && _ref3 < 2500)) {
            codeBin += '1';
          } else if ((1000 < (_ref4 = hi + lo) && _ref4 < 1200)) {
            codeBin += '0';
          } else {
            this.emit('bad-data');
            return false;
            break;
          }
        }
        break;
      }
    }
    if (codeBin.length >= 32) {
      address = parseInt(codeBin.substring(0, 16), 2);
      ircode = parseInt(codeBin.substring(15, 24), 2);
      ircodeInv = parseInt(codeBin.substring(23, 32), 2);
      this.emit('receive', {
        value: codeBin,
        address: address,
        inv: ircodeInv,
        type: 'nec'
      });
      return true;
    } else {
      return false;
    }
  };

  NecParser.prototype.generate = function(cmd, address) {
    var addrBin, buff, c, codeBin, codeBinInv, commandInv, i, _i, _ref;
    codeBin = '00000000'.substring(0, 8 - cmd.toString(2).length) + cmd.toString(2);
    commandInv = (parseInt(cmd) ^ parseInt((new Array(cmd.toString(2).length + 1)).join("1"), 2)).toString(2);
    codeBinInv = '00000000'.substring(0, 8 - commandInv.length) + commandInv;
    addrBin = '0000000000000000'.substring(0, 16 - address.toString(2).length) + address.toString(2);
    c = addrBin + codeBin + codeBinInv;
    buff = new Buffer(c.length * 4);
    for (i = _i = 0, _ref = c.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      buff.writeUInt16BE(Math.floor(560 / SCALER), i * 4);
      if (c.charAt(i) === '0') {
        buff.writeUInt16BE(Math.floor(560 / SCALER), (i * 4) + 2);
      } else {
        buff.writeUInt16BE(Math.floor(1680 / SCALER), (i * 4) + 2);
      }
    }
    return Buffer.concat([Buffer([0x01, 0xAC, 0x00, 0xD6]), buff, Buffer([0xFF, 0xFF])]);
  };

  NecParser.prototype._getBinary = function(val) {
    return '00000000'.substring(0, 8 - val.toString(2).length) + val.toString(2);
  };

  NecParser.prototype._getPulseLength = function(buffer, index) {
    if (index > buffer.length - 2) {
      console.log("Index to large! " + index + " for buff of " + buffer.length + " ");
      return 0;
    } else {
      return Math.floor(SCALER * buffer.readUInt16BE(index));
    }
  };

  return NecParser;

})(EventEmitter);

module.exports = NecParser;
